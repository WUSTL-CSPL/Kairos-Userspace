[
  {
    "comment":"Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project's include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config.",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":null,
      "line":null,
      "class":null
    },
    "rule":"haros_plugin_cppcheck:cppcheckRule"
  },
  {
    "comment":"sensor_manager.cpp:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/sensor_manager.cpp",
      "line":0,
      "class":null
    },
    "rule":"haros_plugin_cpplint:no_copyright"
  },
  {
    "comment":"sensor_manager.cpp:3:  Found C system header after C++ system header. Should be: sensor_manager.h, c system, c++ system, other.  [build/include_order] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/sensor_manager.cpp",
      "line":3,
      "class":null
    },
    "rule":"haros_plugin_cpplint:include_order"
  },
  {
    "comment":"sensor_manager.cpp:7:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/sensor_manager.cpp",
      "line":7,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"sensor_manager.cpp:17:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/sensor_manager.cpp",
      "line":17,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"sensor_manager.cpp:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/sensor_manager.cpp",
      "line":33,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"sensor_manager.cpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/sensor_manager.cpp",
      "line":39,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"sensor_manager.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/sensor_manager.cpp",
      "line":44,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":0,
      "class":null
    },
    "rule":"haros_plugin_cpplint:no_copyright"
  },
  {
    "comment":"motor_manager.cpp:4:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":4,
      "class":null
    },
    "rule":"haros_plugin_cpplint:c_headers"
  },
  {
    "comment":"motor_manager.cpp:12:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":12,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:25:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":25,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":32,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":38,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":40,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":47,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":53,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":57,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":60,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":67,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":70,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":75,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":77,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":80,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:84:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":84,
      "class":null
    },
    "rule":"haros_plugin_cpplint:else_line"
  },
  {
    "comment":"motor_manager.cpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":85,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":88,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:94:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":94,
      "class":null
    },
    "rule":"haros_plugin_cpplint:else_line"
  },
  {
    "comment":"motor_manager.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":95,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":97,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":100,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:104:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":104,
      "class":null
    },
    "rule":"haros_plugin_cpplint:else_line"
  },
  {
    "comment":"motor_manager.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":105,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":108,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":114,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":117,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.cpp:121:  Small and focused functions are preferred: MotorManager::apply_commands() has 66 non-comment lines (error triggered by exceeding 40 lines).  [readability/fn_size] [5]",
    "resources":[],
    "location":{
      "function":"MotorManager::apply_commands()",
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":121,
      "class":null
    },
    "rule":"max_function_length_40"
  },
  {
    "comment":"motor_manager.cpp:121:  Small and focused functions are preferred: MotorManager::apply_commands() has 66 non-comment lines (error triggered by exceeding 50 lines).  [readability/fn_size] [5]",
    "resources":[],
    "location":{
      "function":"MotorManager::apply_commands()",
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":121,
      "class":null
    },
    "rule":"max_eloc_50"
  },
  {
    "comment":"function with cyclomatic complexity 15",
    "resources":[],
    "location":{
      "function":"MotorManager::apply_commands",
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":52,
      "class":null
    },
    "rule":"max_cyclomatic_complexity_10"
  },
  {
    "comment":"Function length of 68",
    "resources":[],
    "location":{
      "function":"MotorManager::apply_commands",
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":52,
      "class":null
    },
    "rule":"max_function_length_40"
  },
  {
    "comment":"MI of 33.1337648102",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/motor_manager.cpp",
      "line":null,
      "class":null
    },
    "rule":"mi_below_65"
  },
  {
    "comment":"Found implementation defined integer type.",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/driver_node.cpp",
      "line":6,
      "class":null
    },
    "rule":"haros_plugin_cppcheck:harosIntegerTypes"
  },
  {
    "comment":"driver_node.cpp:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/driver_node.cpp",
      "line":0,
      "class":null
    },
    "rule":"haros_plugin_cpplint:no_copyright"
  },
  {
    "comment":"driver_node.cpp:4:  Include \"fictibot_drivers/motor_manager.h\" not in alphabetical order  [build/include_alpha] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/driver_node.cpp",
      "line":4,
      "class":null
    },
    "rule":"haros_plugin_cpplint:include_order"
  },
  {
    "comment":"driver_node.cpp:7:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/driver_node.cpp",
      "line":7,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"driver_node.cpp:17:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"src/driver_node.cpp",
      "line":17,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.h:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/motor_manager.h",
      "line":0,
      "class":null
    },
    "rule":"haros_plugin_cpplint:no_copyright"
  },
  {
    "comment":"motor_manager.h:1:  #ifndef header guard has wrong style, please use: _TMP_TMPAY5FDP_HAROS_PLUGIN_CPPLINT_MOTOR_MANAGER_H_  [build/header_guard] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/motor_manager.h",
      "line":1,
      "class":null
    },
    "rule":"haros_plugin_cpplint:header_guard_format"
  },
  {
    "comment":"motor_manager.h:1:  #ifndef header guard has wrong style, please use: MOTOR_MANAGER_H  [build/header_guard] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/motor_manager.h",
      "line":1,
      "class":null
    },
    "rule":"haros_plugin_cpplint:header_guard_format"
  },
  {
    "comment":"motor_manager.h:35:  #endif line should be \"#endif  // _TMP_TMPAY5FDP_HAROS_PLUGIN_CPPLINT_MOTOR_MANAGER_H_\"  [build/header_guard] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/motor_manager.h",
      "line":35,
      "class":null
    },
    "rule":"haros_plugin_cpplint:header_guard_close"
  },
  {
    "comment":"motor_manager.h:9:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/motor_manager.h",
      "line":9,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"motor_manager.h:10:  public: should be indented +1 space inside class MotorManager  [whitespace/indent] [3]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/motor_manager.h",
      "line":10,
      "class":null
    },
    "rule":"haros_plugin_cpplint:indent_access_mod"
  },
  {
    "comment":"motor_manager.h:11:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& n  [runtime/references] [2]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/motor_manager.h",
      "line":11,
      "class":null
    },
    "rule":"haros_plugin_cpplint:non_const_ref"
  },
  {
    "comment":"motor_manager.h:13:  You don't need a ; after a }  [readability/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/motor_manager.h",
      "line":13,
      "class":null
    },
    "rule":"haros_plugin_cpplint:redundant_empty_statement"
  },
  {
    "comment":"motor_manager.h:18:  private: should be indented +1 space inside class MotorManager  [whitespace/indent] [3]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/motor_manager.h",
      "line":18,
      "class":null
    },
    "rule":"haros_plugin_cpplint:indent_access_mod"
  },
  {
    "comment":"sensor_manager.h:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/sensor_manager.h",
      "line":0,
      "class":null
    },
    "rule":"haros_plugin_cpplint:no_copyright"
  },
  {
    "comment":"sensor_manager.h:1:  #ifndef header guard has wrong style, please use: _TMP_TMPAY5FDP_HAROS_PLUGIN_CPPLINT_SENSOR_MANAGER_H_  [build/header_guard] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/sensor_manager.h",
      "line":1,
      "class":null
    },
    "rule":"haros_plugin_cpplint:header_guard_format"
  },
  {
    "comment":"sensor_manager.h:1:  #ifndef header guard has wrong style, please use: SENSOR_MANAGER_H  [build/header_guard] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/sensor_manager.h",
      "line":1,
      "class":null
    },
    "rule":"haros_plugin_cpplint:header_guard_format"
  },
  {
    "comment":"sensor_manager.h:27:  #endif line should be \"#endif  // _TMP_TMPAY5FDP_HAROS_PLUGIN_CPPLINT_SENSOR_MANAGER_H_\"  [build/header_guard] [5]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/sensor_manager.h",
      "line":27,
      "class":null
    },
    "rule":"haros_plugin_cpplint:header_guard_close"
  },
  {
    "comment":"sensor_manager.h:7:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/sensor_manager.h",
      "line":7,
      "class":null
    },
    "rule":"haros_plugin_cpplint:opening_curly_brace"
  },
  {
    "comment":"sensor_manager.h:8:  public: should be indented +1 space inside class SensorManager  [whitespace/indent] [3]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/sensor_manager.h",
      "line":8,
      "class":null
    },
    "rule":"haros_plugin_cpplint:indent_access_mod"
  },
  {
    "comment":"sensor_manager.h:9:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& n  [runtime/references] [2]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/sensor_manager.h",
      "line":9,
      "class":null
    },
    "rule":"haros_plugin_cpplint:non_const_ref"
  },
  {
    "comment":"sensor_manager.h:11:  You don't need a ; after a }  [readability/braces] [4]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/sensor_manager.h",
      "line":11,
      "class":null
    },
    "rule":"haros_plugin_cpplint:redundant_empty_statement"
  },
  {
    "comment":"sensor_manager.h:16:  private: should be indented +1 space inside class SensorManager  [whitespace/indent] [3]",
    "resources":[],
    "location":{
      "function":null,
      "package":"fictibot_drivers",
      "column":null,
      "file":"include/fictibot_drivers/sensor_manager.h",
      "line":16,
      "class":null
    },
    "rule":"haros_plugin_cpplint:indent_access_mod"
  }
]