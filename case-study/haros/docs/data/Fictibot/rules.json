[
  {
    "id":"max_comment_ratio_30",
    "name":"Maximum Comment Ratio of 30%",
    "scope":"file",
    "description":"Maximum Comment Ratio of 30%",
    "tags":[
      "metrics",
      "nasa-satc",
      "comments",
      "comment-ratio"
    ],
    "query":null
  },
  {
    "id":"max_comment_ratio_40",
    "name":"Maximum Comment Ratio of 40%",
    "scope":"file",
    "description":"Maximum Comment Ratio of 40%",
    "tags":[
      "metrics",
      "unak",
      "comments",
      "comment-ratio"
    ],
    "query":null
  },
  {
    "id":"min_comment_ratio_20",
    "name":"Minimum Comment Ratio of 20%",
    "scope":"file",
    "description":"Minimum Comment Ratio of 20%",
    "tags":[
      "metrics",
      "nasa-satc",
      "his",
      "unak",
      "ros",
      "comments",
      "comment-ratio"
    ],
    "query":null
  },
  {
    "id":"max_cyclomatic_complexity_10",
    "name":"Maximum Cyclomatic Complexity of 10",
    "scope":"file",
    "description":"Maximum Cyclomatic Complexity of 10",
    "tags":[
      "metrics",
      "nasa-satc",
      "his",
      "cyclomatic-complexity"
    ],
    "query":null
  },
  {
    "id":"max_cyclomatic_complexity_15",
    "name":"Maximum Cyclomatic Complexity of 15",
    "scope":"file",
    "description":"Maximum Cyclomatic Complexity of 15",
    "tags":[
      "metrics",
      "kth",
      "ros",
      "cyclomatic-complexity"
    ],
    "query":null
  },
  {
    "id":"max_eloc_50",
    "name":"Maximum Executable Lines of Code of 50",
    "scope":"file",
    "description":"Maximum Executable Lines of Code of 50",
    "tags":[
      "metrics",
      "nasa-satc",
      "his",
      "eloc",
      "loc",
      "lines-of-code"
    ],
    "query":null
  },
  {
    "id":"max_eloc_70",
    "name":"Maximum Executable Lines of Code of 70",
    "scope":"file",
    "description":"Maximum Executable Lines of Code of 70",
    "tags":[
      "metrics",
      "kth",
      "ros",
      "eloc",
      "loc",
      "lines-of-code"
    ],
    "query":null
  },
  {
    "id":"max_function_calls_7",
    "name":"Maximum Function Calls of 7",
    "scope":"file",
    "description":"Maximum Function Calls of 7",
    "tags":[
      "metrics",
      "his",
      "function-calls"
    ],
    "query":null
  },
  {
    "id":"max_function_calls_10",
    "name":"Maximum Function Calls of 10",
    "scope":"file",
    "description":"Maximum Function Calls of 10",
    "tags":[
      "metrics",
      "kth",
      "ros",
      "function-calls"
    ],
    "query":null
  },
  {
    "id":"max_function_parameters_6",
    "name":"Maximum Function Parameters of 6",
    "scope":"function",
    "description":"Maximum number of function parameters of 6",
    "tags":[
      "code-standards",
      "functions",
      "parameters",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"max_function_length_40",
    "name":"Maximum Function Length of 40",
    "scope":"function",
    "description":"Maximum number of function lines of code of 40",
    "tags":[
      "code-standards",
      "metrics",
      "functions",
      "loc",
      "lines-of-code",
      "google-cpp",
      "verifysoft"
    ],
    "query":null
  },
  {
    "id":"max_file_length_400",
    "name":"Maximum File Length of 400",
    "scope":"file",
    "description":"Maximum number of program lines of code in a file of 400",
    "tags":[
      "metrics",
      "loc",
      "lines-of-code",
      "verifysoft"
    ],
    "query":null
  },
  {
    "id":"max_control_nesting_4",
    "name":"Maximum Nesting of Control Structures of 4",
    "scope":"file",
    "description":"Maximum Nesting of Control Structures of 4",
    "tags":[
      "metrics",
      "his",
      "nesting",
      "control-structures",
      "control-flow"
    ],
    "query":null
  },
  {
    "id":"max_control_nesting_5",
    "name":"Maximum Nesting of Control Structures of 5",
    "scope":"file",
    "description":"Maximum Nesting of Control Structures of 5",
    "tags":[
      "metrics",
      "kth",
      "ros",
      "nesting",
      "control-structures",
      "control-flow"
    ],
    "query":null
  },
  {
    "id":"max_static_path_80",
    "name":"Maximum Estimated Static Path Count of 80",
    "scope":"file",
    "description":"Maximum Estimated Static Path Count of 80",
    "tags":[
      "metrics",
      "his",
      "static-path"
    ],
    "query":null
  },
  {
    "id":"max_static_path_200",
    "name":"Maximum Estimated Static Path Count of 200",
    "scope":"file",
    "description":"Maximum Estimated Static Path Count of 200",
    "tags":[
      "metrics",
      "hicpp",
      "static-path"
    ],
    "query":null
  },
  {
    "id":"max_static_path_250",
    "name":"Maximum Estimated Static Path Count of 250",
    "scope":"file",
    "description":"Maximum Estimated Static Path Count of 250",
    "tags":[
      "metrics",
      "kth",
      "ros",
      "static-path"
    ],
    "query":null
  },
  {
    "id":"max_coupling_objects_5",
    "name":"Maximum Coupling Between Objects of 5",
    "scope":"file",
    "description":"Maximum Coupling Between Objects of 5",
    "tags":[
      "metrics",
      "nasa-satc",
      "ros",
      "coupling",
      "cbo"
    ],
    "query":null
  },
  {
    "id":"max_immediate_children_10",
    "name":"Maximum Number of Immediate Children of 10",
    "scope":"file",
    "description":"Maximum Number of Immediate Children of 10",
    "tags":[
      "metrics",
      "unak",
      "immediate-children",
      "noc"
    ],
    "query":null
  },
  {
    "id":"max_weighted_methods_50",
    "name":"Maximum Weighted Methods per Class of 50",
    "scope":"file",
    "description":"Maximum Weighted Methods per Class of 50",
    "tags":[
      "metrics",
      "unak",
      "wmc",
      "weighted-methods",
      "methods"
    ],
    "query":null
  },
  {
    "id":"max_weighted_methods_100",
    "name":"Maximum Weighted Methods per Class of 100",
    "scope":"file",
    "description":"Maximum Weighted Methods per Class of 100",
    "tags":[
      "metrics",
      "nasa-satc",
      "ros",
      "wmc",
      "weighted-methods",
      "methods"
    ],
    "query":null
  },
  {
    "id":"max_deepest_inheritance_5",
    "name":"Maximum Deepest Level of Inheritance of 5",
    "scope":"file",
    "description":"Maximum Deepest Level of Inheritance of 5",
    "tags":[
      "metrics",
      "nasa-satc",
      "unak",
      "dit",
      "inheritance"
    ],
    "query":null
  },
  {
    "id":"max_methods_available_20",
    "name":"Maximum Methods Available in Class of 20",
    "scope":"file",
    "description":"Maximum Methods Available in Class of 20",
    "tags":[
      "metrics",
      "nasa-satc",
      "ros",
      "mac",
      "methods-available",
      "methods"
    ],
    "query":null
  },
  {
    "id":"mi_below_20",
    "name":"Maintainability Index Below 20",
    "scope":"file",
    "description":"Maintainability Index below 20",
    "tags":[
      "metrics",
      "microsoft",
      "maintainability",
      "mi",
      "maintainability-index"
    ],
    "query":null
  },
  {
    "id":"mi_below_65",
    "name":"Maintainability Index Below 65",
    "scope":"file",
    "description":"Maintainability Index below 65",
    "tags":[
      "metrics",
      "verifysoft",
      "maintainability",
      "mi",
      "maintainability-index"
    ],
    "query":null
  },
  {
    "id":"halstead_volume_above_8000",
    "name":"Halstead Volume Above 8000",
    "scope":"file",
    "description":"Halstead Volume above 8000",
    "tags":[
      "metrics",
      "verifysoft",
      "halstead",
      "halstead-volume"
    ],
    "query":null
  },
  {
    "id":"halstead_bugs_above_2",
    "name":"Halstead Bugs Above 2",
    "scope":"file",
    "description":"Halstead Bugs above 2",
    "tags":[
      "metrics",
      "verifysoft",
      "halstead",
      "bugs",
      "halstead-bugs"
    ],
    "query":null
  },
  {
    "id":"no_global_names",
    "name":"No Global ROS Names",
    "scope":"file",
    "description":"Avoid using global ROS names (e.g. '/odom')",
    "tags":[
      "code-standards",
      "ros",
      "naming"
    ],
    "query":"nodes/advertise[is_rosglobal(self.name)] | nodes/subscribe[is_rosglobal(self.name)] | nodes/service[is_rosglobal(self.name)] | nodes/client[is_rosglobal(self.name)]"
  },
  {
    "id":"haros_plugin_cppcheck:cppcheckRule",
    "name":"CppCheck Check",
    "scope":"file",
    "description":"Error reported by CppCheck.",
    "tags":[
      "code-standards",
      "cppcheck"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:uninitMemberVar",
    "name":"No Uninitialized Member Variables",
    "scope":"class",
    "description":"All member variables of a class should be initialized after calling the constructor.",
    "tags":[
      "code-standards",
      "classes",
      "member-variables",
      "uninitialized-variables",
      "constructors",
      "google-cpp",
      "jsf-av-cpp",
      "misra-cpp",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:unusedFunction",
    "name":"No Unused Variables",
    "scope":"file",
    "description":"There shall be no unused variables.",
    "tags":[
      "code-standards",
      "variables",
      "unused-variables",
      "misra-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:redundantAssignment",
    "name":"No Redundant Expressions",
    "scope":"file",
    "description":"Ensure that no expression is redundant.",
    "tags":[
      "code-standards",
      "redundancy",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:unreadVariable",
    "name":"No Redundant Variables",
    "scope":"file",
    "description":"Ensure that no expression is redundant.",
    "tags":[
      "code-standards",
      "redundancy",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:variableScope",
    "name":"Smallest Feasible Scope",
    "scope":"file",
    "description":"Declarations should be at the smallest feasible scope.",
    "tags":[
      "code-standards",
      "scope",
      "declarations",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosDeprecatedSTL",
    "name":"Deprecated Functions",
    "scope":"file",
    "description":"Do not use deprecated STL library features.",
    "tags":[
      "code-standards",
      "deprecation",
      "functions",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosRegisterKeyword",
    "name":"Do Not Use register",
    "scope":"file",
    "description":"Do not use the deprecated register keyword.",
    "tags":[
      "code-standards",
      "deprecation",
      "register",
      "cpp11",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosThrowSpecification",
    "name":"Use noexcept",
    "scope":"function",
    "description":"Do not use throw exception specifications. Use noexcept instead.",
    "tags":[
      "code-standards",
      "deprecation",
      "cpp11",
      "exceptions",
      "throw",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosCaseWithoutBreak",
    "name":"Unexpected Case Fall Through",
    "scope":"function",
    "description":"Non-empty case blocks must not fall through to the next case.",
    "tags":[
      "code-standards",
      "switch",
      "case",
      "fall-through",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosBooleanCase",
    "name":"At Least Two Cases",
    "scope":"function",
    "description":"A switch should have at least two cases distinct from the default case.",
    "tags":[
      "code-standards",
      "switch",
      "hicpp",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosEnumWithoutBase",
    "name":"Enum With No Base Type",
    "scope":"file",
    "description":"Ensure that an enum has a specified base type able to accomodate all its values.",
    "tags":[
      "code-standards",
      "enum",
      "types",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosInlineAssembly",
    "name":"No ASM Declarations",
    "scope":"file",
    "description":"Do not use asm declarations.",
    "tags":[
      "code-standards",
      "assembly",
      "asm",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosDoublePointer",
    "name":"Pointer Indirection",
    "scope":"file",
    "description":"Use at most one level of pointer indirection.",
    "tags":[
      "code-standards",
      "pointers",
      "multiple-pointers",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosTriplePointer",
    "name":"Pointer Indirection",
    "scope":"file",
    "description":"Use at most two levels of pointer indirection.",
    "tags":[
      "code-standards",
      "pointers",
      "multiple-pointers",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosSixParams",
    "name":"Maximum of 6 Function Parameters",
    "scope":"function",
    "description":"Maximum number of function parameters: 6",
    "tags":[
      "code-standards",
      "functions",
      "parameters",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosConstUniquePtr",
    "name":"No unique_ptr by Const Reference",
    "scope":"function",
    "description":"Do not pass a std::unique_ptr by const reference.",
    "tags":[
      "code-standards",
      "pointers",
      "std-unique-ptr",
      "const",
      "references",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosDefaultArguments",
    "name":"No Default Arguments",
    "scope":"function",
    "description":"Do not use default arguments.",
    "tags":[
      "code-standards",
      "functions",
      "default-arguments",
      "arguments",
      "parameters",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosBooleanVector",
    "name":"No Boolean Vectors",
    "scope":"file",
    "description":"Do not use std::vector<bool>. It does not conform to the requirements of a container.",
    "tags":[
      "code-standards",
      "std-vector",
      "boolean",
      "hicpp",
      "misra-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosUnion",
    "name":"No Unions",
    "scope":"file",
    "description":"Do not use unions. Use a safe polymorphic abstraction, instead.",
    "tags":[
      "code-standards",
      "unions",
      "polymorphism",
      "type-safety",
      "hicpp",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosIntegerTypes",
    "name":"Integer Types",
    "scope":"file",
    "description":"Do not use integer types directly. Use size-specific typedefs, for instance from &lt;cstdint&gt;.",
    "tags":[
      "code-standards",
      "integer-types",
      "type-safety",
      "portability",
      "hicpp",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosAssignIncrement",
    "name":"Order of Evaluation",
    "scope":"file",
    "description":"Do not rely on the sequence of evaluation within an expression.",
    "tags":[
      "code-standards",
      "evaluation-order",
      "expressions",
      "hicpp",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosAssignAssignment",
    "name":"Order of Evaluation",
    "scope":"file",
    "description":"Do not rely on the sequence of evaluation within an expression.",
    "tags":[
      "code-standards",
      "evaluation-order",
      "expressions",
      "hicpp",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosFloatEquality",
    "name":"Float Accuracy",
    "scope":"file",
    "description":"Do not write code that expects floating point calculations to yield exact results.",
    "tags":[
      "code-standards",
      "floats",
      "floating-point",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosOverrideUnaryAnd",
    "name":"Operator Overload",
    "scope":"file",
    "description":"Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.",
    "tags":[
      "code-standards",
      "overload",
      "operators",
      "hicpp",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosOverrideBinaryAnd",
    "name":"Operator Overload",
    "scope":"file",
    "description":"Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.",
    "tags":[
      "code-standards",
      "overload",
      "operators",
      "hicpp",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosOverrideBinaryOr",
    "name":"Operator Overload",
    "scope":"file",
    "description":"Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.",
    "tags":[
      "code-standards",
      "overload",
      "operators",
      "hicpp",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosOverrideComma",
    "name":"Operator Overload",
    "scope":"file",
    "description":"Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.",
    "tags":[
      "code-standards",
      "overload",
      "operators",
      "hicpp",
      "misra-cpp",
      "jsf-av-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosUsingErrno",
    "name":"C Standard Library",
    "scope":"file",
    "description":"Wrap use of the C Standard Library.",
    "tags":[
      "code-standards",
      "c",
      "libraries",
      "c-standard-library",
      "hicpp",
      "misra-cpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_cppcheck:harosRvalueStdArray",
    "name":"Array Reference",
    "scope":"function",
    "description":"Do not create an rvalue reference of std::array.",
    "tags":[
      "code-standards",
      "std-array",
      "rvalue-reference",
      "hicpp"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_pyflwor:query",
    "name":"User-defined Query",
    "scope":"global",
    "description":"A user-defined query found a match.",
    "tags":[
      "code-standards",
      "query",
      "pyflwor",
      "computation-graph"
    ],
    "query":null
  },
  {
    "id":"haros_plugin_pbt_gen:pbtest",
    "name":"Property-based Test",
    "scope":"file",
    "description":"An automatic property-based test failed.",
    "tags":[
      "testing",
      "pbt"
    ],
    "query":null
  }
]